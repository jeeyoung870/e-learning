[ Features needed for implementing video chat ]
1. Get user's video feed - display the captured video on the screen
2. Audio mute/unmute && Camera on/off
3. Switch between front and rear camera when using a mobile phone


[ Add 'video' tag to 'home.pug' ]
video#myFace(autoplay, playsinline)
playsinline : Prevents full-screen playback of video and runs it within the web page. (Necessary for mobile environment)
autoplay: Automatically plays the video


[ Receiving Stream in app.js ]
Stream = video + audio
1) Obtain user media (stream) from the mediaDevices object supported by the navigator
// async (returns promise) function getMedia()
await navigator.mediaDevices.getUserMedia(constraints);
** await works only within async functions. It waits until the promise is resolved before moving to the next line.

2) Insert the stream object into the srcObject of the #myFace element.
Once the browser is connected and the camera/microphone permissions are granted, the video stream will appear on the screen.


[ Switching audio and video on/off ]
The Stream object returned by getUserMedia() supports the following functions :
->getAudioTracks() -> Returns an array of all available audio devices for the user
->getVideoTracks() -> Returns an array of all available video devices for the user
By changing the enabled property value of all device settings in the returned array (using forEach) to true/false, 
you can turn audio and video devices on and off.



[ Creating a list of user video devices for camera switching ]
enumerateDevices() (The navigator supported function of the mediaDevices object) :  
	returns information on 'all' devices (desktop/mobile) in an Array.
1) Find devices with the {kind : "videoinput"} property in the returned array.
2) Add video devices as selectbox options for the user to choose a camera.
	Set the 'deviceId' property of the camera device as option.value,
	and the 'label' property as option.innerText.
3) When the user selects a different option, change the camera immediately with the value (deviceId).
	deviceId is specified in the constraints section of getUserMedia(constraints) within the getMedia() function. 

< For mobile >
	video: {facingMode: "user"}  -> Selfie mode
	video: {facingMode: {exact: "environment"} }  -> Rear camera
< For all cases >
	video: { deviceId: "received user device id" }  -> Select a specific device, if not available, show another device screen
	video: { deviceId: {exact: "received user device id"} }  -> If the ID doesn't exactly match, don't show the screen.

	myStream.getVideoTracks(): Returns the currently selected camera in an Array.
