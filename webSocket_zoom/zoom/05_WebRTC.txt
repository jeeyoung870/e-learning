[ WebRTC API ]
- What is WebRTC?   https://100s.tistory.com/59?category=1052192

** WebSocket && SocketIO = not peer to peer
	The server mediates all events and messages. All sockets must be connected to the server.
** WebRTC = peer to peer (O)
	The transmitted video/text doesn't go through the server. It's directly transferred from user to user (real-time).
	This connection between browsers results in increased speed.

- Conditions required for peer-to-peer connections: 
	The browsers need to inform the server about their location information (position/IP/open port/server configuration). 
	The server's role is only to inform the browsers about the locations of other browsers.


[Creating a WebRTC Peer Connection]
1) myPeerConnection = new RTCPeerConnection();
2) Audio and video streams (myStream.getTracks()) need to be added to the myPeerConnection (peer-to-peer connection).


[ Connecting Action Roles & Sequence ]

1) Peer A:
        getUserMedia()
        addTrack(track, myStream)
        createOffer()   //Create an invitation text for other browsers to join
        setLocalDescription(offer): set my offer  ->  send offer
2) Signaling Server:
        ("offer", offer object, roomName)
3) Peer B:
        setRemoteDescription(offer): set Peer A's offer
        getUserMedia()
        addTrack(track, myStream)
        createAnswer()
        setLocalDescription(answer): set my answer    ->  send answer
4) Signaling Server:
        "answer"
5) Peer A:
        setRemoteDescription(): set Peer B's offer
-------------------------------------------------

// ice of RTCIceCandidate = Internet Connectivity Establishment //
1) Peer A:
        "icecandidate" event emit  ->  send candidate
2) Signaling Server:
        "candidate"
3) Peer B:
        addIceCandidate()
4) Peer B:
        "icecandidate" event emit  ->  send candidate
5) Signaling Server:
        "candidate"
6) Peer A:
        addIceCandidate()
----------------------------------------------------
last) Peer A && Peer B:
        "addStream" event emit  ->  enjoy audio+video
        (Get the other browser's stream from the "addStream" event object.)

Conclusion:
- For Peer to connect, setLocalDescription(my offer) and setRemoteDescription(opponent's answer) must be set in my RTCPeerConnection object.
- "icecandidate" and "addStream" are events that automatically occur in the RTCPeerConnection object, 
        and you can obtain the other party's candidate and stream objects from each event object!



[ Synchronize camera switch with the other browser ]
- Reason for disconnection:
	The myStream is newly created in getMedia every time the camera is switched (handleCameraChange), so it is not updated in the peerConnection.
	(This change only applies to my browser.)
	The track on the other browser must also be changed -> Through the Sender!
- myPeerConnection.getSenders():
	Returns an array of currently connected audio/video RTCRtpSender objects
	** What is a Sender? : Allows control of the media stream track sent to the Peer.
	Choose a sender with kind="video", and change the video track using the RTCRtpSender.replaceTrack(changedTrack) method.



""""""
근데 왜 카메라전환후  mute켯다껏다는 안됨????
replaceTrack 오디오도 해야되나??
""""""



[ STUN Server ]

- When accessing the localtunnel URL on a mobile device, functions such as camera switching, mute/unmute do not work properly.
- This is because the other person and I are not connected to the same Wi-Fi.
- This is where a STUN server comes in. 
        STUN server helps my device know its public IP address (usable with a peer).
- If you want to operate in reality, you need to create your own STUN server, but if not, you can use Google's provided STUN server. (https://gist.github.com/zziuni/3741933 )
	Due to an increase in users, using Google's provided STUN server is not smooth, and it didn't work for me, so I applied XIRSYS's STUN/TURN instead. (https://xirsys.com/)
- With the application of STUN, it is confirmed that peer connections can be made even if they are not on the same Wi-Fi (ex))PC <-> mobile data).


