[ RTCPeerConnection.createDataChannel() ]

- RTCPeerConnection creates a connection channel that allows exchanging all types of data.
- It enables the real-time sharing of various content, such as images, files, and text. 
  For example, it can be used to share location coordinates with other users, making it possible to implement 2P games.
- Similar to how "offer" and "answer" events are used to establish mutual connections for video WebRTC implementation, 
  this method functions in a similar manner.
- Unlike real-time video/audio streaming, it is less affected by speed degradation.
- https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel

# Syntax

// Commom
const pc = new RTCPeerConnection(options);

//Offerer
const channel = pc.createDataChannel("chat");   // make a channel names "chat"
channel.onopen = (event) => {
  channel.send('Hi you!');
}

//Answerer
pc.ondatachannel = (event) => {
  const channel = event.channel;
    channel.onopen = (event) => {
    channel.send('Hi back!');
  }
  // react when channel.send('Hi you!');
  channel.onmessage = (event) => {
    console.log(event.data);
  }
}


# add consideration
When writing the code for channel creation, you can specify the id as follows:
pc.createDataChannel("chat", {negotiated: true, id: '000'});

---------------------------------------------------------------------------------

# Weakness of Video/Audio WebRTC :
    WebRTC enables sharing of uncompressed, full-quality files/streams.
    However, one should consider the resulting decrease in speed.
    Since all participating users are connected, it is advantageous for a small group but slows down when many people participate.
    (It's a technology suited for 2-person P2P services)

    !!! However, DataChannels that do not provide real-time video or audio streams are fine with multiple peer connections !!!

# Alternative technology for multi-person streaming - SFU : 
    SFU relies on the server for sharing streams/files.
    Peers are connected to the server instead of each other, so only one upload is needed.
    On the downside, the server compresses smaller screens and shares them at lower quality, so the downloaded and displayed video is a low-quality stream.
    It can be used without any speed reduction with many participants.