[ WebRTC API ]
** WebSocket && SocketIO =  peer to peer (X)
    서버가 모든 이벤트/메세지를 중개함. 모든 소켓은 서버와 연결되어 있어야 함.
** WebRTC = peer to peer (O)
    전송되는 영상/텍스트가 서버를 경유하지 않음. 사용자->사용자로 직접 전달됨(real-time)
    브라우저끼리의 연결.    속도 up

- peer to peer연결 필요조건 : 
    상대의 위치정보(위치/ip/오픈port/서버configuration)를 브라우저>서버로 알려줘야 함.
    서버는 브라우저에 상대 브라우저의 위치를 알려주는 역할만 함

[ WebRTC의 peer connection 만들기 ]
1) myPeerConnection = new RTCPeerConnection();
2) peer-to-peer연결인 myPeerConnection에 stream(오디오+비디오)를 넣어줘야함. myStream.getTracks()


[ 연결동작 역할&순서 ]

1) Peer A:
        getUserMedia()
        addTrack(track, myStream)
        createOffer()   //다른 브라우저가 참가할수있는 초대장 text제작
        setLocalDescription(offer): 내 offer세팅하기  ->  send offer
2) Signaling Server:
        ("offer", offer객체, roomName)
3) Peer B:
        setRemoteDescription(offer): Peer A의 offer세팅하기
        getUserMedia()
        addTrack(track, myStream)
        createAnswer()
        setLocalDescription(answer): 내 answer세팅하기    ->  send answer
4) Signaling Server:
        "answer"
5) Peer A:
        setRemoteDescription(): Peer B의 offer세팅하기
-------------------------------------------------
// RTCIceCandidate 의 ice = Internet Connectivity Establishment //
1) Peer A:
        "icecandidate" event 발생  ->  send candidate
2) Signaling Server:
        "candidate"
3) Peer B:
        addIceCandidate()
4) Peer B:
        "icecandidate" event 발생  ->  send candidate
5) Signaling Server:
        "candidate"
6) Peer A:
        addIceCandidate()
----------------------------------------------------
last) Peer A && Peer B:
        "addStream" event 발생  ->  enjoy audio+video
        ("addStream" event 객체에서 상대 브라우저의 stream을 얻을 수 있다.)

결론:
- Peer연결되려면, 내 RTCPeerConnection객체에 setLocalDescription(내 offer) 와 setRemoteDescription(상대방answer) 가 되어야 함
- "icecandidate" 와 "addStream" 은 RTCPeerConnection객체에서 자동발생하는 event인데,
    각각의 event 객체에서 상대방의 candidate와 stream 객체를 얻을 수 있다!



[ 카메라 전환해도 상대 브라우저에서 연동되게 하기 ]
- 연동끊기는 이유 : 
    카메라 전환(handleCameraChange)할때마다 getMedia에서 myStream을 새로 만들어서 peerConnection에는 업데이트되지 않기 때문.
    (내브라우저에서만 바뀌는것임)
    상대 브라우저의 트랙도 바꿔줘야 함 -> Sender를 통해!

- myPeerConnection.getSenders() :
    현재 연결된 각 오디오/비디오 RTCRtpSender객체가 array로 반환됨 
    ** Sender란?: 내가 Peer에게 보낸 media stream track을 컨트롤 가능
    kind="video" 인 sender를 골라, RTCRtpSender.replaceTrack(바뀐트랙) 메소드로 비디오 트랙을 변경해준다.



""""""
근데 왜 카메라전환후  mute켯다껏다는 안됨????
replaceTrack 오디오도 해야되나??
""""""



[ Stun Server ]

- 모바일로 localtunnel url 접속하면 카메라전환, mute/unmute 등 기능이 제대로 되지 않는다.
- 상대방과 내가 같은 wifi에 연결되어 있지 않기 때문이다.
- 그를 위해 필요한 것이 STUN 서버이다.
    STUN서버는 내 장치가 public(공용) IP주소를 알려줌(peer와 같이 사용가능한)
- 실제 운영을 위해서는 직접 STUN서버 만들어야 하지만, 아닌 경우에는 google이 제공하는 STUN서버를 빌려쓸수 있다.
    https://gist.github.com/zziuni/3741933
