[ HTTP vs WebSocket ]
공통점 : 둘다 protocol임
- HTTP : request <-> response 로 이루어짐.
    stateless(실시간이 아님.)
    respond 후에 user를 기억하지 못함.
- WebSocket : 지원만 된다면 http대신 wss 사용가능
    브라우저 <-connection-> 서버 (bi-directional)
    혹은 서버 <-> 서버도 가능!
    connection 성립시 real-time communication 가능
    user 기억함
    요청 기다리지 않고 서버에서 정보 송신 가능
    브라우저 내장 WebSocket API 사용가능

[ ws : WebSocket Library for nodeJS ]
html의 addEventListener 처럼 비슷하게 사용할 수 있다.
event가 발생하고, 처리할 함수를 지정함.
ex) back의 경우 : socket.on("close", ()=>{});
    front의 경우 : socket.addEventListener("open", callback);

동작순서에 유의한다 : 
웹소켓 연결시> wss.on("connection", (socket)=>{}); 실행
            socket.addEventListener("open", callback); 실행
server.js> socket.send("hello!"); 전송
app.js> socket.addEventListener("message", callback); 실행
연결 해제시> socket.addEventListener("message", callback); 실행
