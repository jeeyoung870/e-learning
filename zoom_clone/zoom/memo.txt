[ HTTP vs WebSocket ]
공통점 : 둘다 protocol임
- HTTP : request <-> response 로 이루어짐.
    stateless(실시간이 아님.)
    respond 후에 user를 기억하지 못함.
- WebSocket : 지원만 된다면 http대신 wss 사용가능
    브라우저 <-connection-> 서버 (bi-directional)
    혹은 서버 <-> 서버도 가능!
    connection 성립시 real-time communication 가능
    user 기억함
    요청 기다리지 않고 서버에서 정보 송신 가능
    브라우저 내장 WebSocket API 사용가능

[ ws : WebSocket Library for nodeJS ]
html의 addEventListener 처럼 비슷하게 사용할 수 있다.
event가 발생하고, 처리할 함수를 지정함.
ex) back의 경우 : socket.on("connection", (socket)=>{});
    front의 경우 : socket.addEventListener("open", callback);

동작순서에 유의한다 : 
웹소켓 연결시> wss.on("connection", (socket)=>{}); 실행
            socket.addEventListener("open", callback); 실행
server.js> socket.send("hello!"); 전송
app.js> socket.addEventListener("message", callback); 실행
연결 해제시> socket.addEventListener("message", callback); 실행

** 각각 다른 브라우저에서 http://localhost:3000에 접속할경우,
    브라우저들은 한 서버와 연결되지만, 브라우저끼리는 연결되지 않아서 
    각각이 보낸 메세지를 공유할 수 없다.
    이를 위해 const sockets = []; 을 선언해줌

** app.js 에서 handleSubmit()과 handleNickSubmit()에서는 둘다 socket.send()를 사용한다.
    하나는 메시지고 하나는 닉네임을 전송하지만 서버에서는 이 둘을 모두 on("message" 로 받기 때문에
    뭐가 뭔지 구별해낼 수 없다.
    그러므로 send시의 인자는 type:payload 값을 가지는 json객체를 stringify 한것을 넣는다.